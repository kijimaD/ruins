// Package systems はゲームシステムの実装を提供する。
//
// # 概要
//
// このパッケージは入力処理、UI更新、レンダリングなどのゲームシステムを実装している。
// 特にTileInputSystemは、プレイヤー入力を受け取りactionsパッケージと連携してアクションを実行する。
//
// # 責務
//
// - 入力処理とアクション変換
// - UI要素の更新処理
// - ゲーム状態の同期
// - 外部システムとの橋渡し
//
// # 使い分け
//
// ## TileInputSystem
// - プレイヤーのキーボード・マウス入力を処理
// - 入力を適切なアクション（移動、攻撃等）に変換
// - ターン管理システムによる実行可否チェック
// - actionsパッケージへのアクション実行依頼
//
// ## HUD関連システム
// - ゲーム情報の表示更新
// - プレイヤー状態の反映
// - メニュー操作の処理
//
// # 他パッケージとの関係
//
// ```
// systems (入力層)
//
//	↓ 入力受信・変換
//
// turns (制御層) - 実行可否判定
//
//	↓ 実行許可
//
// actions (実行層) - アクション実行
// ```
//
// ## 設計原則
//
// 1. **入力の抽象化**: 入力デバイスの詳細を隠蔽し、ゲームアクションに変換
// 2. **責務の分離**: 入力処理のみに集中し、ゲームロジックは他パッケージに委譲
// 3. **非依存性**: 具体的なゲームルールには依存せず、インターフェースを通じて連携
//
// # 実装例
//
//	// プレイヤー入力の処理フロー
//	func TileInputSystem(world w.World) {
//		// 1. ターン管理による実行可否チェック
//		if !turnManager.CanPlayerAct() {
//			return
//		}
//
//		// 2. キー入力を方向に変換
//		direction := convertKeyToDirection()
//
//		// 3. アクション実行（actionsパッケージに委譲）
//		executeActivity(world, actions.ActivityMove, params)
//	}
package systems
