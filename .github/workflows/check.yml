name: ⚗️Check

on:
  push:
    branches:
      - main
  pull_request:

env:
  GH_TOKEN: ${{ secrets.WRITE_PACKAGE }}

jobs:
  # 共通処理
  setup:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: set up
        uses: actions/setup-go@v6
        id: go
      - name: check out
        uses: actions/checkout@v5
      - name: Cache
        uses: actions/cache@main
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

  build:
    needs: setup
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: build
        run: docker build --target release .

  crosscomple:
    needs: setup
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # タグ情報を取得するために全履歴を取得
      - name: build
        run: make build

  test:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      # octocov 用の設定
      # PRにコメントする
      pull-requests: write
      # 実行時間取得
      contents: write
      # 前のレポートを取得する
      actions: read
    steps:
      - uses: actions/checkout@v5
      - name: build
        run: docker build --target builder -t testimage .
      # テスト実行が docker 上ではうまくいかないのでここで実行する
      - name: test
        run: |
          sudo apt update -y
          sudo apt install -y libc6-dev libglu1-mesa-dev libgl1-mesa-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev libxxf86vm-dev libasound2-dev pkg-config
          export DISPLAY=:99
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &

          make test
          make vrt
      - name: set up
        uses: actions/setup-go@v6
      - name: lint
        run: make tools-install lint # buildできる環境でないと、エラーになる。jobを分けるのが望ましいが、面倒なのでここに書く
      -
        name: coverage for octocov
        run: go test ./... -coverprofile=coverage.out
      -
        uses: k1LoW/octocov-action@v1

      # 差分があればコミット
      - name: commit for changes
        run: |
          if ! git diff --exit-code --quiet
          then
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "chore: update by GitHub Actions"
            git push
          fi

  image:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5

      - name: Get git tag(short)
        id: git-tag
        run: |
          GIT_TAG=$(git rev-parse --short HEAD)
          echo "::set-output name=git-tag::$GIT_TAG"

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.WRITE_PACKAGE }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build image for release
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          target: release
          push: true
          tags: ghcr.io/kijimad/ruins:${{ steps.git-tag.outputs.git-tag }},ghcr.io/kijimad/ruins:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        if: github.ref == 'refs/heads/main'
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
